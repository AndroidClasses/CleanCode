apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.cleaner.home"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code // Notice that you may want to use BUILD_NUMBER from CI in real project with own CI.
        versionName versions.name
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dependencies {
        compile fileTree(include: ['*.jar'], dir: 'libs')
//        compile project(':navigationtabbar')
//        compile 'com.github.devlight.navigationtabbar:navigationtabbar:1.2.3'

        compile libraries.supportAppCompat
        compile libraries.supportDesign

        compile libraries.butterKnife
        apt libraries.butterKnifeCompiler

        compile libraries.fastJson

        // Dagger dependencies
        apt libraries.daggerCompiler
        provided libraries.javaxAnnotation
        compile libraries.dagger
    }

    lintOptions {
//        disable 'InvalidPackage'
        warning 'InvalidPackage'
//        lintConfig file("lint.xml")
//        // set to true to turn off analysis progress reporting by lint
//        quiet true
//        // if true, stop the gradle build if errors are found
//        abortOnError false
//        // if true, only report errors
//        ignoreWarnings true
//        // if true, emit full/absolute paths to files with errors (true by default)
//        //absolutePaths true
//        // if true, check all issues, including those that are off by default
//        checkAllWarnings true
//        // if true, treat all warnings as errors
//        warningsAsErrors true
//        // turn off checking the given issue id's
//        disable 'TypographyFractions','TypographyQuotes'
//        // turn on the given issue id's
//        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
//        // check *only* the given issue id's
//        check 'NewApi', 'InlinedApi'
//        // if true, don't include source code lines in the error output
//        noLines true
//        // if true, show all locations for an error, do not truncate lists, etc.
//        showAll true
//        // Fallback lint configuration (default severities, etc.)
//        lintConfig file("default-lint.xml")
//        // if true, generate a text report of issues (false by default)
//        textReport true
//        // location to write the output; can be a file or 'stdout'
//        textOutput 'stdout'
//        // if true, generate an XML report for use by for example Jenkins
//        xmlReport false
//        // file to write report to (if not specified, defaults to lint-results.xml)
//        xmlOutput file("lint-report.xml")
//        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
//        htmlReport true
//        // optional path to report (default will be lint-results.html in the builddir)
//        htmlOutput file("lint-report.html")
//
//        // set to true to have all release builds run lint on issues with severity=fatal
//        // and abort the build (controlled by abortOnError above) if fatal issues are found
//        checkReleaseBuilds true
//        // Set the severity of the given issues to fatal (which means they will be
//        // checked during release builds (even if the lint target is not included)
//        fatal 'NewApi', 'InlineApi'
//        // Set the severity of the given issues to error
//        error 'Wakelock', 'TextViewEdits'
//        // Set the severity of the given issues to warning
//        warning 'ResourceAsColor'
//        // Set the severity of the given issues to ignore (same as disabling the check)
//        ignore 'TypographyQuotes'
    }

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {

        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

